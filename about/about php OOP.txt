OOP Basic

Абстракция
Инкапсуляция
Наследование
Полиморфизм
Класс
Объект
Прототип


Complexity

- Связанность
- Сопряженность

Example: Shopping Cart

Все существительные ТЗ превращаются в классы.
Класс не должен оперировать слишком большим количеством других классов.

Статистика тестирования:
100%-е покрытие кода юнит тестами отловит 25% ошибок.

25% усложнение задачи делает код на 100% сложнее.

Use Case
- Title
- User
- Level
- Positive scenario
- Extensions


UC-1 Добавление в карту

-Покупатель
-Добавление
-Промокод
-Обновить карту

UML

В основном используется только три типа связи (?)

Метод CRC  - Class Responsibility Collaborator - Класс-Ответственность-Кооперация

CRC-карты также заставляют дизайнера воздержаться от назначения классу слишком многих обязанностей.

Схема карты:

Имя класса: Суперкласс Entity

Подклассы: Классы производные от этого: Page, Post, User, Banner

Ответственность: Описание методов

Кооперация: Связь с другими классами



EAV: Entity, Attribute, Value
  E: Item
  A:    Size
  V:      42
  
Patterns:

Repository
  find(..) .. Item
  
  
Promocode

  getDixcount(5)
  isValid
  
FindP PeriodP

Pc Repository
  find(s)
  

  Кузов и Автомобиль: Агрегация
  
  Квартира и Владелец: Агрегация
  Факультеты и Профессора: Агрегация
  
  
  Университет и факультеты: Композиция  (факультеты без университета погибают)


  
  Entity Obj      сущность
  Asset Obj       актив
  Decorator Obj
  
  Pattern Decorator
    render(Int)
    
    
  MVC ...
  
http              / -> index
Initialization    /product/... ->product
Routing           Controller + Action

action      -> view model

render            POJO




  
  
  
  